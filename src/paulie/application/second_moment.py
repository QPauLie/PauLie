"""
Module for computing the second-order twirl of an operator
over a group generated by system generators, based on the theory
in arXiv:2502.16404.
"""
from paulie.common.pauli_string_collection import PauliStringCollection
from paulie.common.pauli_string_linear import PauliStringLinear

def second_moment(
    operator_m: PauliStringLinear, system_generators: PauliStringCollection
) -> PauliStringLinear:
    """
    Computes the second-order twirl of an operator M by projecting it onto the
    subspace of quadratic symmetries.
    """
    # Get the unnormalized basis directly from the collection object
    q_basis = system_generators.get_full_quadratic_basis(normalized=False)

    twirl_result = PauliStringLinear([(0.0, 'I' * operator_m.get_size())])

    for q_kj in q_basis:
        trace_numerator = (q_kj.h @ operator_m).trace()
        if abs(trace_numerator) < 1e-12:
            continue

        # Denominator is Tr(Qâ€ Q)
        trace_denominator = (q_kj.h @ q_kj).trace()
        if abs(trace_denominator) < 1e-12:
            continue

        coeff = trace_numerator / trace_denominator
        projection = q_kj * coeff
        twirl_result += projection

    return twirl_result.simplify()
