"""
reachable
"""
import numpy as np
from scipy.linalg import block_diag
from paulie.common.pauli_string_collection import PauliStringCollection


def is_in_so(a):
    """
    is_in_so
    """
    return a.dot(a.T) == np.eye(a.shape)


def is_in_sp(a):
    """
    is_in_sp
    """
    d = a.shape[0]
    j = np.fliplr(block_diag(np.eye(d/2), np.eye(d/2)))
    return a.conj @ j @ a == j


def reachable(u, generators: PauliStringCollection):
    """
    input: U as a numpy array, generator list
    output: whether it is reachable
    """
    if u.shape[0] > len(generators[0]):
        raise AssertionError("unitary can not be generated by generators of smaller dimensions")
    classification = generators.get_class()
    if classification.is_algebra("su"):
        return True
    if classification.is_algebra("so") and is_in_so(u):
        return True
    if classification.is_algebra("sp") and is_in_sp(u):
        return True
    # the case of direct sum has to be worked out in detail
    return None
