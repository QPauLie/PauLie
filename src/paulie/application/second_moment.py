"""
Module for computing the second-order twirl of an operator
over a group generated by system generators, based on the theory
in arXiv:2502.16404.
"""
from paulie.common.pauli_string_collection import PauliStringCollection
from paulie.common.pauli_string_linear import PauliStringLinear

def second_moment(
    operator_m: PauliStringLinear, system_generators: PauliStringCollection
) -> PauliStringLinear:
    """
    Computes the second-order twirl of an operator M by projecting it onto the
    subspace of quadratic symmetries.
    """
    # Get the unnormalized basis directly from the collection object
    orthonormal_basis = system_generators.get_full_quadratic_basis(normalized=True)

    twirl_result = PauliStringLinear([(0.0, 'I' * operator_m.get_size())])

    for q_norm in orthonormal_basis:
        # Step 2: The projection coefficient is now just Tr(Q_normâ€  * M).
        # The denominator is 1 by definition of an orthonormal basis.
        coeff = (q_norm.h @ operator_m).trace()

        # If the projection is negligible, skip
        if abs(coeff) < 1e-12:
            continue

        # Step 3: Add the scaled basis vector to the result
        projection = q_norm * coeff
        twirl_result += projection

    return twirl_result.simplify()
