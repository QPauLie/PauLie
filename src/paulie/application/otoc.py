"""
    Compute the average out-of-time-order correlator between two Pauli strings.
"""
import networkx as nx
from paulie.common.pauli_string_factory import get_pauli_string as p
from paulie.common.pauli_string_collection import PauliStringCollection
from paulie.common.pauli_string_bitarray import PauliString

def average_otoc(generators: PauliStringCollection,
                 v: PauliString, w: PauliString) -> float:
    """
    Computes the Haar averaged out-of-time-order correlator between two Pauli strings.
    We write it as F(W, U^H @ V @ U) = E[tr[W @ U^H @ V @ U @ W @ U^H @ V @ U]] / d where
    U is a Haar randomly sampled unitary from the Lie group of the DLA generated by
    generators and d is the dimension of the Hilbert space.

    We can compute this as
    1 - 2 * |{W, P} = 0 : P in connected component of V| / |connected component of V|
    where we take the commutator graph.

    Args:
        generators: Generating set of the Pauli string DLA.
        v: Pauli string V
        w: Pauli string W
    """
    # Generate commutator graph
    vertices, edges = generators.get_commutator_graph()
    graph = nx.Graph()
    graph.add_nodes_from(vertices)
    graph.add_edges_from(edges)
    # Get connected component of V
    v_connected_component = nx.node_connected_component(graph, str(v))
    # Count the number of elements t in the connected component of V
    # that anticommute with W
    anticommute_count = sum([not w | p(t) for t in v_connected_component])
    return 1 - 2 * anticommute_count / len(v_connected_component)
